#!/bin/sh
if [ $# -lt 1 ]; then
	set xxx 
fi
mkdir $1
cd $1
mkdir sources
mkdir debug
mkdir release
mkdir bin
#
cat >./debug/makefile <<DONE
CC=g++
ARC=-m64 -mfpmath=sse -msse2
CFLAGS=-c -g \$(ARC) -I\$(HDR_MIPSHELL) -I\$(HDR_MIPCL) -D__THREADS_=
LDFLAGS=-shared-libgcc
#
RM=rm -f
INS=install
MIP_DIR=\$(MIPCLDIR)
INSDIR=../bin
CFLAGS+=-DMIPSHELL_API="" -DMIP_API=""
LDFLAGS+= -L\$(MIP_DIR)/lib -lmipcl -lmipshell
TARGET=$1_dbg
#
HDR_MIPCL=\$(MIP_DIR)/mipcl/headers
HDR_MIPSHELL=\$(MIP_DIR)/mipshell/headers
#
VPATH=`pwd`/sources
CFLAGS+=-I\$(VPATH)
MOD= \$(shell echo \$(VPATH)/*.mod)
AUX=\$(MOD:.mod=.aux)
SRC=\$(notdir \$(shell echo \$(VPATH)/*.cpp))
OBJS=\$(SRC:.cpp=.o)
#
.cpp.o:
	\$(CC) \$(CFLAGS) \$< -o \$@
%.aux : %.mod ;	\$(MIP_DIR)/bin/mod2cpp \$< \$(<D)/\$@
#
build: \$(OBJS)
	\$(CC) \$(LDFLAGS) \$(OBJS) -o \$(TARGET)
#dependencies
$1.cpp: $1.mod 
$1.o: $1.cpp $1.aux $1.h
main.o: main.cpp $1.h
#
.PHONY: clean
clean:
	\$(RM) \$(OBJS) \$(AUX)
install: \$(TARGET)
	\$(INS) \$(TARGET) \$(INSDIR)
	\$(RM) \$(TARGET)
all: build install

DONE
#
cat >./release/makefile <<DONE
CC=g++
ARC=-m64 -mfpmath=sse -msse2
CFLAGS=-c -O3 \$(ARC) -I\$(HDR_MIPSHELL) -I\$(HDR_MIPCL) -D__THREADS_=
LDFLAGS=-shared-libgcc
INSDIR=../bin
#
INS=install
MIP_DIR=\$(MIPCLDIR)
RM=rm -f
CFLAGS+=-DMIPSHELL_API="" -DMIP_API=""
LDFLAGS+= -L\$(MIP_DIR)/lib -lmipcl -lmipshell
TARGET=$1
#
HDR_MIPCL=\$(MIP_DIR)/mipcl/headers
HDR_MIPSHELL=\$(MIP_DIR)/mipshell/headers
#
VPATH=../sources
CFLAGS+=-I\$(VPATH)
MOD= \$(shell echo \$(VPATH)/*.mod)
AUX=\$(MOD:.mod=.aux)
SRC=\$(notdir \$(shell echo \$(VPATH)/*.cpp))
OBJS=\$(SRC:.cpp=.o)
#
.cpp.o:
	\$(CC) \$(CFLAGS) \$< -o \$@
%.aux : %.mod ;	\$(MIP_DIR)/bin/mod2cpp \$< \$(<D)/\$@
#
build: \$(OBJS) 
	\$(CC) \$(LDFLAGS) \$(OBJS) -o \$(TARGET)
#dependencies
$1.cpp: $1.mod 
$1.o: $1.cpp $1.aux $1.h
main.o: main.cpp $1.h
#
.PHONY: clean
clean:
	\$(RM) \$(OBJS) \$(AUX)
install: \$(TARGET)
	\$(INS) \$(TARGET) \$(INSDIR)
	\$(RM) \$(TARGET)
all: build install

DONE
#
cat >./sources/main.cpp <<DONE
#include <iostream>
#include "$1.h"

int main(int argc, const char *argv[])
{
	try {
		C$1 prob(argv[1]);
		prob.model();
	}
	catch(CException* pe) {
		std::cerr << pe->what() << std::endl;
		delete pe;
		return 1;
	}
	return 0;
}

DONE
#
cat >./sources/$1.cpp <<DONE
#include "$1.h"

C$1::C$1(const char* name): CProblem(name)
{
// TODO: Create your model
}

#ifdef __THREADS_
C$1::C$1(const C$1 &other, int thread): CProblem(other,thread)
{
// TODO: write your code here
} // end of C$1::C$1(C$1 &other, int thread)

CMIP* C$1::clone(const CMIP *pMip, int thread)
{
	return static_cast<CMIP*>(new C$1(*static_cast<C$1*>(const_cast<CMIP*>(pMip)),thread));
}
#endif

C$1::~C$1()
{
#ifdef __THREADS_
	if (!m_iThread) {
#endif
// TODO: delete shared members 
#ifdef __THREADS_
	}
#endif
// TODO: delete not-shared members 
}

//////////////////// implementation

#include "$1.aux"

DONE

cat >./sources/$1.mod <<DONE
int C$1::model()
{
// TODO: write your  model
	optimize();
	printsol();
	return 0;
} // end of C$1::model

DONE
#
cat >./sources/$1.h <<DONE
#include <mipshell.h>

class C$1: public CProblem
{
// TODO: declare MIPshell variables
public:
	C$1(const char* name);
#ifdef __THREADS_
	C$1(const C$1 &other, int thread);
	CMIP* clone(const CMIP *pMip, int thread);
#endif
	virtual ~C$1();

	int model();
// TODO: declare problem specific functions

};

DONE

